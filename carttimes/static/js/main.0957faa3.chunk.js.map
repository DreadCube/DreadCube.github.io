{"version":3,"sources":["Charts.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["timeToMs","time","parts","split","Number","Charts","selectedRacers","series","name","data","options","chart","id","xaxis","categories","fill","labels","formatter","value","yaxis","duration","milliseconds","parseInt","seconds","Math","floor","minutes","hours","msToTime","style","width","styleLevel","type","racers","racersDB","Content","React","useState","checkedRacers","setCheckedRacers","maxWidth","map","racer","index","checked","find","checkedRacer","onChange","e","newCheckedRacers","foundRacerIndex","findIndex","splice","push","toggleRacer","labelPlacement","LABEL_PLACEMENT","right","engine","Styletron","Centered","styled","display","justifyContent","alignItems","height","App","theme","DarkTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0957faa3.chunk.js","sourcesContent":["import React from 'react'\n\nimport '../node_modules/react-vis/dist/style.css';\n\nimport {HeadingLevel, Heading} from 'baseui/heading'\n\nimport Chart from \"react-apexcharts\";\n\n\nconst msToTime = (duration) => {\n    \n    var milliseconds = parseInt((duration % 1000)),\n      seconds = Math.floor((duration / 1000) % 60),\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  \n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n    \n    if (milliseconds < 10) {\n        milliseconds = \"00\" + milliseconds\n    } else if (milliseconds < 100) {\n        milliseconds = \"0\" + milliseconds\n    }\n    return minutes + \":\" + seconds + \".\" + milliseconds;\n  }\n\n\n\nconst timeToMs = (time) => {\n    const parts = time.split(':')\n    const ms = (Number(parts[0]) * 60 * 1000) + (Number(parts[1]) * 1000 ) + Number(parts[2])\n    return ms\n}\nconst Charts = ({selectedRacers}) => {\n\n    const series = [\n        {\n          name: \"DreadCube\",\n          data: [\n              timeToMs('00:46:109'),\n              timeToMs('00:45:920'),\n              timeToMs('00:45:840'),\n              timeToMs('00:45:588'),\n              timeToMs('00:45:340'),\n              timeToMs('00:45:169'),\n              timeToMs('00:45:168'),\n              timeToMs('00:45:339'),\n              timeToMs('00:45:006'),\n              timeToMs('00:45:236'),\n              timeToMs('00:45:091'),\n              timeToMs('00:45:201')\n            ]\n        },\n        {\n            name: \"HaferflÃ¶ckli\",\n            data: [\n                timeToMs('00:46:854'),\n                timeToMs('00:46:878'),\n                timeToMs('00:46:705'),\n                timeToMs('00:46:663'),\n                timeToMs('00:46:616'),\n                timeToMs('00:46:513'),\n                timeToMs('00:46:452'),\n                timeToMs('00:46:565'),\n                timeToMs('00:46:624'),\n                timeToMs('00:46:569'),\n                timeToMs('00:46:757'),\n                timeToMs('00:46:754')\n              ]\n          },\n          {\n            name: \"Lavaling\",\n            data: [\n                timeToMs('00:47:614'),\n                timeToMs('00:46:990'),\n                timeToMs('00:46:875'),\n                timeToMs('00:46:569'),\n                timeToMs('00:46:470'),\n                timeToMs('00:46:564'),\n                timeToMs('00:46:766'),\n                timeToMs('00:46:940'),\n                timeToMs('00:46:460'),\n                timeToMs('00:46:486'),\n                timeToMs('00:46:491'),\n                timeToMs('00:46:316')\n              ]\n          }\n      ]\n\n    const options = {\n        chart: {\n            id: \"basic-bar\"\n        },\n        xaxis: {\n            categories: [].fill(20),\n            labels: {\n                formatter: (value) => {\n                    return `L ${value}`\n                }\n            }\n        },\n        yaxis: {\n            labels: {\n                formatter: (value) => {\n                    return msToTime(value)\n                }\n            }\n        }\n    }\n\n    return (\n        <div style={{width: '80vw'}}>\n        <HeadingLevel>\n            <Heading styleLevel={4}>Rundenzeiten nach Fahrer</Heading>\n        </HeadingLevel>\n        <Chart\n              options={options}\n              series={series}\n              type=\"line\"\n            />\n        </div>\n    )\n}\n\nexport default Charts","import React from 'react'\n\nimport {\n    Checkbox,\n    LABEL_PLACEMENT\n  } from \"baseui/checkbox\";\n\nimport {HeadingLevel, Heading} from 'baseui/heading'\nimport racersDB from './racersDB.json'\n\nimport Charts from './Charts'\n\nconst racers = racersDB\n\n\n\nconst Content = () => {\n\n    const [checkedRacers, setCheckedRacers] = React.useState([])\n\n\n    const toggleRacer = (id) => {\n        \n        const newCheckedRacers = [...checkedRacers]\n        const foundRacerIndex = checkedRacers.findIndex(racer => racer === id)\n\n        if (foundRacerIndex >= 0) {\n            newCheckedRacers.splice(foundRacerIndex, 1)\n        } else {\n            newCheckedRacers.push(id)\n        }\n    \n        setCheckedRacers(newCheckedRacers)\n    \n    }\n\n    return (<div style={{maxWidth: '100vw'}}>\n        <HeadingLevel>\n            <Heading>Cart Times</Heading>\n        </HeadingLevel>\n        {racers.map((racer, index) => {\n            return (\n            <Checkbox\n                checked={checkedRacers.find(checkedRacer => checkedRacer === racer.id) >= 0}\n                onChange={e => toggleRacer(racer.id)}\n                labelPlacement={LABEL_PLACEMENT.right}\n              >\n                  {racer.name}\n              </Checkbox>\n            )\n        })}\n   \n            <Charts selectedRacers={checkedRacers} />\n        </div>)\n}\n\nexport default Content","import React from 'react';\n\nimport './App.css'\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Provider as StyletronProvider} from 'styletron-react';\nimport {DarkTheme, BaseProvider, styled} from 'baseui';\n\nimport Content from './Content'\nconst engine = new Styletron();\nconst Centered = styled('div', {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  height: '100%',\n});\n\nfunction App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={DarkTheme}>\n        <Centered>\n          <Content />\n        </Centered>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}