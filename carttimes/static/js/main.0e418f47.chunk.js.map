{"version":3,"sources":["Chart.js","List.js","pouchdb.js","Charts.js","Edit.js","EditRacers.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Chart","seriesData","title","React","useState","stateSeries","setStateSeries","useEffect","series","map","serie","data","entry","time","parts","split","Number","timeToMs","options","text","margin","style","color","dataLabels","enabled","chart","id","type","animations","easing","speed","animateGradually","delay","dynamicAnimation","xaxis","categories","fill","labels","formatter","value","colors","yaxis","duration","milliseconds","parseInt","seconds","Math","floor","minutes","hours","msToTime","fontSize","show","legend","useSeriesColors","List","racers","name","unshift","racerDatas","raceLength","length","i","filteredData","subData","subKey","push","columns","PouchDB","plugin","PouchDbFind","raceTimeFormatter","raceTime","Date","toLocaleDateString","undefined","year","month","day","hour","minute","Charts","selectedRacers","raceData","setRaceData","find","selector","dateTime","$exists","sort","then","docs","marginBottom","race","Edit","useForm","register","handleSubmit","setRacers","console","log","rounds","setRounds","allDocs","include_docs","res","rows","racer","doc","roundsCount","Array","currentDateIsoString","toISOString","substring","indexOf","onSubmit","racesDB","createIndex","index","fields","$eq","result","put","_id","_rev","String","random","placeholder","inputRef","required","onChange","e","target","display","flexWrap","minWidth","flexDirection","flex","styleLevel","round","marginTop","mask","EditRacers","racersDB","nextId","Content","CONTENT_VIEW","setContentView","checkedRacers","paddingRight","$align","ALIGN","center","cursor","onClick","justifyContent","width","engine","Styletron","Centered","styled","App","theme","DarkTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qXA6GeA,EA9ED,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MAAW,EAEGC,IAAMC,SAASH,GAFlB,mBAE5BI,EAF4B,KAEfC,EAFe,KAGnCH,IAAMI,WAAU,WACZ,IAAMC,EAASP,EAAWQ,KAAI,SAAAC,GAE1B,OADAA,EAAMC,KAAOD,EAAMC,KAAKF,KAAI,SAAAG,GAAK,OAX5B,SAACC,GACd,IAAMC,EAAQD,EAAKE,MAAM,KAEzB,OAD+B,GAAnBC,OAAOF,EAAM,IAAW,IAA4B,IAAnBE,OAAOF,EAAM,IAAeE,OAAOF,EAAM,IASzCG,CAASL,MACvCF,KAEXJ,EAAeE,KAChB,CAACP,IAEJ,IAAMiB,EAAU,CACZhB,MAAO,CACHiB,KAAMjB,EACNkB,OAAQ,GACRC,MAAO,CACHC,MAAO,YAGfC,WAAY,CACRC,SAAS,GAEbC,MAAO,CACHC,GAAI,YACJC,KAAM,OACNC,WAAY,CACRJ,SAAS,EACTK,OAAQ,YACRC,MAAO,IACPC,iBAAkB,CACdP,SAAS,EACTQ,MAAO,KAEXC,iBAAkB,CACdT,SAAS,EACTM,MAAO,OAInBI,MAAO,CACHC,WAAY,GAAGC,KAAK,IACpBC,OAAQ,CACJC,UAAW,SAACC,GACR,MAAM,KAAN,OAAYA,IAEhBlB,MAAO,CACHmB,OAAQ,aAIpBC,MAAO,CACHJ,OAAQ,CACJC,UAAW,SAACC,GACR,OAhFH,SAACG,GAEd,IAAIC,EAAeC,SAAUF,EAAW,KACtCG,EAAUC,KAAKC,MAAOL,EAAW,IAAQ,IACzCM,EAAUF,KAAKC,MAAOL,EAAQ,IAAkB,IAChDO,EAAQH,KAAKC,MAAOL,EAAQ,KAAuB,IAWrD,OATAO,EAASA,EAAQ,GAAM,IAAMA,EAAQA,EAIjCN,EAAe,GACfA,EAAe,KAAOA,EACfA,EAAe,MACtBA,EAAe,IAAMA,IANzBK,EAAWA,EAAU,GAAM,IAAMA,EAAUA,GAQ1B,KAPjBH,EAAWA,EAAU,GAAM,IAAMA,EAAUA,GAOV,IAAMF,EAgEhBO,CAASX,IAEpBlB,MAAO,CACH8B,SAAU,QACVX,OAAQ,WAEZY,MAAM,IAGdC,OAAQ,CACJhB,OAAQ,CACJiB,iBAAiB,KAK7B,OACQ,kBAAC,IAAD,CACIpC,QAASA,EACTV,OAAQH,EACRsB,KAAK,U,QC/EN4B,EArBF,SAAC,GAAwB,EAAvBrD,MAAwB,IAAjBD,EAAgB,EAAhBA,WACZuD,EAASvD,EAAWQ,KAAI,SAAAD,GAAM,OAAIA,EAAOiD,QAC/CD,EAAOE,QAAQ,OAOf,IANA,IAAM/C,EAAOV,EAAWQ,KAAI,SAAAD,GAAM,OAAIA,EAAOG,QAEvCgD,EAAa,GAEbC,EAAajD,EAAK,GAAGkD,OAPO,WASzBC,GACL,IAAMC,EAAepD,EAAKF,KAAI,SAACuD,EAASC,GAAV,OAAqBD,EAAQF,MAC3DC,EAAaL,QAAQI,EAAE,GACvBH,EAAWO,KAAKH,IAHXD,EAAI,EAAGA,EAAIF,EAAYE,IAAM,EAA7BA,GAMT,OAAQ,kBAAC,IAAD,CACIK,QAASX,EACT7C,KAAMgD,K,gBClBtBS,IAAQC,OAAOC,KAEAF,QAAf,ECCMG,EAAoB,SAACC,GAGvB,OADc,IAAIC,KAAKD,GAAUE,wBAAmBC,EADpC,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,aA6ChFC,EAxCA,SAAC,GAAqB,EAApBC,eAAqB,IAAD,EAED/E,IAAMC,SAAS,IAFd,mBAE1B+E,EAF0B,KAEhBC,EAFgB,KAoBjC,OAhBAjF,IAAMI,WAAU,WACI,IAAI6D,EAAQ,SACpBiB,KAAK,CACTC,SAAU,CACNC,SAAU,CACNC,SAAS,IAGjBC,KAAM,CAAC,CAACF,SAAU,WACnBG,MAAK,SAAA/E,GACJyE,EAAYzE,EAAKgF,WAGtB,IAIC,yBAAKtE,MAAO,CAACuE,aAAc,KACtBT,EAAS1E,KAAI,SAAAoF,GAEV,OAAO,oCACH,kBAAC,EAAD,CACI3F,MAAOqE,EAAkBsB,EAAKN,UAC9BtF,WAAY4F,EAAKrF,SAErB,kBAAC,EAAD,CACIN,MAAOqE,EAAkBsB,EAAKN,UAC9BtF,WAAY4F,EAAKrF,e,gEC2E1BsF,EA3GF,WAAO,IAAD,EAGoBC,cAA3BC,EAHO,EAGPA,SAAUC,EAHH,EAGGA,aAHH,EAsBa9F,IAAMC,SAAS,IAtB5B,mBAsBRoD,EAtBQ,KAsBA0C,EAtBA,KAuBfC,QAAQC,IAAI5C,GAvBG,MAwBarD,IAAMC,SAAS,GAxB5B,mBAwBRiG,EAxBQ,KAwBAC,EAxBA,KA0BfnG,IAAMI,WAAU,WACK,IAAI6D,EAAQ,UACpBmC,QACL,CACIC,cAAc,IACfd,MACC,SAAAe,GAAG,OAAIP,EACHO,EAAIC,KAAKjG,KACL,SAAAkG,GAAK,OAAIA,EAAMC,aAIhC,IAEH,IAAMC,EAAc,IAAIC,MAAMT,GAAQjE,KAAK,IAGrC2E,GADc,IAAItC,MACiBuC,cAChBD,EAAqBE,UAAU,EAA0C,GAAJ,EAAlCF,EAAqBG,QAAQ,MAAW,GAEpG,OACI,oCACA,0BAAMC,SAAUlB,GA5CH,SAACtF,GACd,IAAMyG,EAAU,IAAIhD,EAAQ,SAC5BgD,EAAQC,YAAY,CAACC,MAAO,CAACC,OAAQ,CAAC,eACtCH,EAAQ/B,KAAK,CAACC,SAAU,CAACC,SAAU,CAACiC,IAAK7G,EAAK4E,aACzCG,MAAK,SAAA+B,GACEA,EAAO9B,KAAK9B,OAAS,EACrBuD,EAAQM,IAAR,eACO/G,EADP,CAEIgH,IAAKF,EAAO9B,KAAK,GAAGgC,IACpBC,KAAMH,EAAO9B,KAAK,GAAGiC,QAGzBR,EAAQM,IAAR,eAAgB/G,EAAhB,CAAsBgH,IAAKE,OAAO/E,KAAKgF,aAE3C3B,QAAQC,IAAIzF,UA+BhB,kBAAC,IAAD,CACIgB,KAAK,iBACLoG,YAAY,YACZtE,KAAK,WACLuE,SAAUhC,EAAS,CAACiC,UAAU,MAElC,kBAAC,IAAD,CACItG,KAAK,SACLoG,YAAY,mBACZtE,KAAK,iBACLyE,SAAU,SAACC,GAAD,OAAO7B,EAAUtF,OAAOmH,EAAEC,OAAO7F,WAI3C,yBAAKlB,MAAO,CAACgH,QAAS,OAAQC,SAAU,SACnC9E,EAAO/C,KAAI,SAACkG,EAAOW,GAChB,OACI,yBAAKjG,MAAO,CAACD,OAAQ,GAAImH,SAAU,IAAKF,QAAS,OAAQG,cAAe,SAAUC,KAAM,IAEpF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASC,WAAY,GAAI/B,EAAMlD,OAEnC,yBAAKpC,MAAO,CAACuE,aAAc,IACvB,kBAAC,IAAD,CACIjE,KAAK,SACL8B,KAAI,iBAAYkD,EAAMgB,IAAlB,UACJpF,MAAOoE,EAAMlD,KACbuE,SAAUhC,EAAS,CAACiC,UAAU,MAElC,kBAAC,IAAD,CACIF,YAAY,WACZpG,KAAK,SACL8B,KAAI,iBAAYkD,EAAMgB,IAAlB,YACJK,SAAUhC,EAAS,CAACiC,UAAU,MAEjCpB,EAAYpG,KAAI,SAACkI,EAAOrB,GACrB,OAAO,yBAAKjG,MAAO,CAACuH,UAAW,EAAGhD,aAAc,IACpC,kBAAC,IAAD,CACImC,YAAW,gBAAWT,EAAQ,GAC9BuB,KAAK,YACLpF,KAAI,iBAAYkD,EAAMgB,IAAlB,kBAA+BL,EAA/B,KACJU,SAAUhC,cAUtD,kBAAC,IAAD,CAAQrE,KAAK,UAAb,gBCzDGmH,EA7CI,WAAO,IAAD,EAEc/C,cAA3BC,EAFa,EAEbA,SAAUC,EAFG,EAEHA,aAFG,EAIO9F,IAAMC,SAAS,IAJtB,mBAIdoD,EAJc,KAIN0C,EAJM,KAMrBC,QAAQC,IAAI5C,GACZrD,IAAMI,WAAU,WACK,IAAI6D,EAAQ,UACpBmC,QACL,CACIC,cAAc,IACfd,MACC,SAAAe,GAAG,OAAIP,EACHO,EAAIC,KAAKjG,KACL,SAAAkG,GAAK,OAAIA,EAAMC,aAIhC,IAaH,OACI,0BAAMO,SAAUlB,GAZH,SAACtF,GACd,IAAMoI,EAAW,IAAI3E,EAAQ,UAE7B2E,EAASxC,UAAUb,MAAK,SAAAe,GACpB,IAAMuC,EAASnB,OAAOpB,EAAIC,KAAK7C,QAC/BkF,EAASrB,IAAI,CAACjE,KAAM9C,EAAK8C,KAAMkE,IAAKqB,IAAStD,MAAK,SAAAe,cAQlD,kBAAC,IAAD,CACI9E,KAAK,OACLoG,YAAY,aACZtE,KAAK,OACLuE,SAAUhC,EAAS,CAACiC,UAAU,MAElC,kBAAC,IAAD,CAAQtG,KAAK,UAAb,mB,wBCkBGsH,EA7CC,WAAO,IAAD,EAEqB9I,IAAMC,SAAS,QAFpC,mBAEX8I,EAFW,KAEGC,EAFH,OAGwBhJ,IAAMC,SAAS,IAHvC,mBAGXgJ,EAHW,UAOlB,OACI,oCACI,kBAAC,IAAD,CAAkB/H,MAAO,CAACuE,aAAc,GAAIyD,aAAc,KACtD,kBAAC,IAAD,CAAsBC,OAAQC,IAAMC,QAChC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACInI,MAAO,CAACoI,OAAQ,WAChBC,QAAS,kBAAMP,EAAe,UAFlC,SAMJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI9H,MAAO,CAACoI,OAAQ,WAChBC,QAAS,kBAAMP,EAAe,iBAFlC,eAMJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI9H,MAAO,CAACoI,OAAQ,WAChBC,QAAS,kBAAMP,EAAe,UAFlC,iBAQZ,yBAAK9H,MAAO,CAACgH,QAAS,OAAQsB,eAAgB,WAE1C,yBAAKtI,MAAO,CAACuI,MAAO,SACF,SAAjBV,GAA2B,kBAAC,EAAD,CAAQhE,eAAgBkE,IAClC,SAAjBF,GAA2B,kBAAC,EAAD,MACV,gBAAjBA,GAAkC,kBAAC,EAAD,UCrD7CW,EAAS,IAAIC,IACbC,EAAWC,YAAO,MAAO,IAkBhBC,MAZf,WACE,OACE,kBAAC,IAAD,CAAmB1H,MAAOsH,GACxB,kBAAC,IAAD,CAAcK,MAAOC,KACnB,kBAACJ,EAAD,KACE,kBAAC,EAAD,UCRUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjF,QAAQiF,MAAMA,EAAMC,c","file":"static/js/main.0e418f47.chunk.js","sourcesContent":["import React from 'react'\n\nimport ApexChart from \"react-apexcharts\";\n\nconst msToTime = (duration) => {\n    \n    var milliseconds = parseInt((duration % 1000)),\n      seconds = Math.floor((duration / 1000) % 60),\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  \n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n    \n    if (milliseconds < 10) {\n        milliseconds = \"00\" + milliseconds\n    } else if (milliseconds < 100) {\n        milliseconds = \"0\" + milliseconds\n    }\n    return minutes + \":\" + seconds + \".\" + milliseconds;\n  }\n\n\n\nconst timeToMs = (time) => {\n    const parts = time.split(':')\n    const ms = (Number(parts[0]) * 60 * 1000) + (Number(parts[1]) * 1000 ) + Number(parts[2])\n    return ms\n}\n\nconst Chart = ({seriesData, title}) => {\n\n    const [stateSeries, setStateSeries] = React.useState(seriesData)\n    React.useEffect(() => {\n        const series = seriesData.map(serie => {\n            serie.data = serie.data.map(entry => timeToMs(entry))\n            return serie\n        })\n        setStateSeries(series)\n    }, [seriesData])\n  \n    const options = {\n        title: {\n            text: title,\n            margin: 10,\n            style: {\n                color: '#FFFFFF'\n            }\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        chart: {\n            id: \"basic-bar\",\n            type: 'area',\n            animations: {\n                enabled: true,\n                easing: 'easeinout',\n                speed: 800,\n                animateGradually: {\n                    enabled: true,\n                    delay: 150\n                },\n                dynamicAnimation: {\n                    enabled: true,\n                    speed: 350\n                }\n            }\n        },\n        xaxis: {\n            categories: [].fill(20),\n            labels: {\n                formatter: (value) => {\n                    return `L ${value}`\n                },\n                style: {\n                    colors: '#FFFFFF'\n                }\n            }\n        },\n        yaxis: {\n            labels: {\n                formatter: (value) => {\n                    return msToTime(value)\n                },\n                style: {\n                    fontSize: '2.5vw',\n                    colors: '#FFFFFF'\n                },\n                show: false\n            }\n        },\n        legend: {\n            labels: {\n                useSeriesColors: true\n            }\n        }\n    }\n\n    return (\n            <ApexChart\n                options={options}\n                series={stateSeries}\n                type=\"area\"\n                />\n    )\n}\n\nexport default Chart","import React from 'react'\n\nimport { Table } from \"baseui/table\";\n\nconst List = ({title, seriesData}) => {\n    const racers = seriesData.map(series => series.name)\n    racers.unshift('Lap')\n    const data = seriesData.map(series => series.data)\n    \n    const racerDatas = []\n\n    const raceLength = data[0].length\n   \n    for (let i = 0; i < raceLength; i++) {\n        const filteredData = data.map((subData, subKey) => subData[i])\n        filteredData.unshift(i+1)\n        racerDatas.push(filteredData)\n    }\n    \n    return  <Table\n                columns={racers}\n                data={racerDatas}\n            />\n}\n\nexport default List","import PouchDB from 'pouchdb'\nimport PouchDbFind from 'pouchdb-find'\n\nPouchDB.plugin(PouchDbFind)\n\nexport default PouchDB","import React from 'react'\nimport Chart from './Chart'\nimport List from './List'\n\nimport PouchDB from './pouchdb'\n\nconst raceTimeFormatter = (raceTime) => {\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\", hour: '2-digit', minute: '2-digit' }\n    const title = new Date(raceTime).toLocaleDateString(undefined, options)\n    return title\n}\n\nconst Charts = ({selectedRacers}) => {\n\n    const [raceData, setRaceData] = React.useState([])\n\n    React.useEffect(() => {\n        const racesDB = new PouchDB('races')\n        racesDB.find({\n            selector: {\n                dateTime: {\n                    $exists: true\n                }\n            },\n            sort: [{dateTime: 'desc'}],\n        }).then(data => {\n            setRaceData(data.docs)\n        })\n\n    }, [])\n\n    \n    return (\n        <div style={{marginBottom: 50}}>\n            {raceData.map(race => {\n\n                return <>\n                    <Chart \n                        title={raceTimeFormatter(race.dateTime)}\n                        seriesData={race.series}\n                    />\n                    <List\n                        title={raceTimeFormatter(race.dateTime)}\n                        seriesData={race.series}\n                    />\n                </>\n            })}\n        </div>\n        \n    )\n}\n\nexport default Charts","import React from 'react'\nimport PouchDB from './pouchdb'\nimport {Heading, HeadingLevel} from 'baseui/heading';\n\nimport {MaskedInput, Input} from 'baseui/input'\n\nimport {Grid, Cell} from 'baseui/layout-grid';\nimport {Button} from 'baseui/button';\n\nimport { useForm } from \"react-hook-form\"\n\nconst Edit = () => {\n\n\n    const { register, handleSubmit } = useForm();\n    const onSubmit = (data) => {\n        const racesDB = new PouchDB('races')\n        racesDB.createIndex({index: {fields: ['dateTime']}})\n        racesDB.find({selector: {dateTime: {$eq: data.dateTime}}})\n            .then(result => {\n                if (result.docs.length > 0) {\n                    racesDB.put({\n                        ...data,\n                        _id: result.docs[0]._id,\n                        _rev: result.docs[0]._rev\n                    })\n                } else {\n                    racesDB.put({...data, _id: String(Math.random())})\n                }\n                console.log(data)\n            })\n    }\n\n    const [racers, setRacers] = React.useState([])\n    console.log(racers)\n    const [rounds, setRounds] = React.useState(2)\n\n    React.useEffect(() => {\n        const racersDb = new PouchDB('racers')\n        racersDb.allDocs(\n            {\n                include_docs: true\n            }).then(\n                res => setRacers(\n                    res.rows.map(\n                        racer => racer.doc\n                    )\n                )\n            )\n    }, [])\n\n    const roundsCount = new Array(rounds).fill('')\n    \n    const currentDate = new Date()\n    const currentDateIsoString = currentDate.toISOString()\n    const currentDateValue = currentDateIsoString.substring(0, (currentDateIsoString.indexOf('T')|0)+ 6|0)\n    \n    return (\n        <>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <Input\n                type=\"datetime-local\"\n                placeholder=\"Race Date\"\n                name=\"dateTime\"\n                inputRef={register({required: true})}\n            />\n            <Input\n                type=\"number\"\n                placeholder=\"Number of Rounds\"\n                name=\"numberOfRounds\"\n                onChange={(e) => setRounds(Number(e.target.value))}\n\n            />\n            \n                <div style={{display: 'flex', flexWrap: 'wrap'}}>\n                    {racers.map((racer, index) => {\n                        return (\n                            <div style={{margin: 20, minWidth: 300, display: 'flex', flexDirection: 'column', flex: 1}}>\n                                \n                                <HeadingLevel>\n                                    <Heading styleLevel={6}>{racer.name}</Heading>\n                                </HeadingLevel>\n                                <div style={{marginBottom: 5}}>\n                                    <Input\n                                        type=\"hidden\"\n                                        name={`series[${racer._id}].name`}\n                                        value={racer.name}\n                                        inputRef={register({required: true})}\n                                    />\n                                    <Input\n                                        placeholder=\"Kart Nr.\"\n                                        type=\"number\"\n                                        name={`series[${racer._id}].cartNr`}\n                                        inputRef={register({required: true})}\n                                    />\n                                    {roundsCount.map((round, index) => {\n                                        return <div style={{marginTop: 5, marginBottom: 5}}>\n                                                    <MaskedInput\n                                                        placeholder={`Runde ${index + 1}`}\n                                                        mask=\"99:99:999\"\n                                                        name={`series[${racer._id}].data[${index}]`}\n                                                        inputRef={register}\n                                                    />\n                                                </div>                          \n                                    })}\n                                    \n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            <Button type=\"submit\">Speichern</Button>\n            </form>\n        </>\n    )\n    \n}\n\nexport default Edit","import React from 'react'\n\nimport {Input} from 'baseui/input'\nimport {Button} from 'baseui/button';\n\nimport PouchDB from './pouchdb'\n\nimport { useForm } from \"react-hook-form\"\n\nconst EditRacers = () => {\n\n    const { register, handleSubmit } = useForm();\n\n    const [racers, setRacers] = React.useState([])\n\n    console.log(racers)\n    React.useEffect(() => {\n        const racersDb = new PouchDB('racers')\n        racersDb.allDocs(\n            {\n                include_docs: true\n            }).then(\n                res => setRacers(\n                    res.rows.map(\n                        racer => racer.doc\n                    )\n                )\n            )\n    }, [])\n\n    const onSubmit = (data) => {\n        const racersDB = new PouchDB('racers')\n\n        racersDB.allDocs().then(res => {\n            const nextId = String(res.rows.length)\n            racersDB.put({name: data.name, _id: nextId}).then(res => {\n            })\n        })\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <Input\n                type=\"TEXT\"\n                placeholder=\"Racer Name\"\n                name=\"name\"\n                inputRef={register({required: true})}\n            />\n            <Button type=\"submit\">Hinzufügen</Button>\n        </form>\n    )\n}\n\nexport default EditRacers","import React from 'react'\n\nimport {HeadingLevel, Heading} from 'baseui/heading'\nimport racersDB from './racersDB.json'\n\nimport Charts from './Charts'\nimport {Button} from 'baseui/button'\n\nimport {H3, H4, H6} from 'baseui/typography'\n\nimport Edit from './Edit'\nimport EditRacers from './EditRacers'\n\nimport {\n    HeaderNavigation,\n    ALIGN,\n    StyledNavigationList,\n    StyledNavigationItem\n  } from \"baseui/header-navigation\";\n\n  import {StyledLink as Link} from 'baseui/link';\n\nconst Content = () => {\n\n    const [CONTENT_VIEW, setContentView] = React.useState('MAIN')\n    const [checkedRacers, setCheckedRacers] = React.useState([])\n\n\n\n    return (\n        <>\n            <HeaderNavigation style={{marginBottom: 20, paddingRight: 20}}>\n                <StyledNavigationList $align={ALIGN.center}>\n                    <StyledNavigationItem>\n                        <H6\n                            style={{cursor: 'pointer'}}\n                            onClick={() => setContentView('MAIN')}>\n                                Home\n                        </H6>\n                    </StyledNavigationItem>\n                    <StyledNavigationItem>\n                        <H6\n                            style={{cursor: 'pointer'}}\n                            onClick={() => setContentView('EDIT_RACERS')}>\n                                Add Racers\n                        </H6>\n                    </StyledNavigationItem>\n                    <StyledNavigationItem>\n                        <H6\n                            style={{cursor: 'pointer'}}\n                            onClick={() => setContentView('EDIT')}>\n                                Edit Times\n                        </H6>\n                    </StyledNavigationItem>\n                </StyledNavigationList>\n            </HeaderNavigation>\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n\n                <div style={{width: '95vw'}}>\n                {CONTENT_VIEW === 'MAIN' && <Charts selectedRacers={checkedRacers} />}\n                {CONTENT_VIEW === 'EDIT' && <Edit />}\n                {CONTENT_VIEW === 'EDIT_RACERS' && <EditRacers />}\n                </div>\n            </div>\n        </>)\n}\n\nexport default Content","import React from 'react';\n\nimport './App.css'\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Provider as StyletronProvider} from 'styletron-react';\nimport {DarkTheme, BaseProvider, styled} from 'baseui';\n\nimport Content from './Content'\nconst engine = new Styletron();\nconst Centered = styled('div', {\n  /*display: 'flex',\n  height: '100%',\n  width: '100%'*/\n});\n\nfunction App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={DarkTheme}>\n        <Centered>\n          <Content />\n        </Centered>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}